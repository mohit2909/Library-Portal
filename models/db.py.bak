# -*- coding: utf-8 -*-

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
## File is released under public domain and you can use without limitations
#########################################################################

## if SSL/HTTPS is properly configured and you want all HTTP requests to
## be redirected to HTTPS, uncomment the line below:
# request.requires_https()

if not request.env.web2py_runtime_gae:
## if NOT running on Google App Engine use SQLite or other DB
	db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['all'])
else:
	## connect to Google BigTable (optional 'google:datastore://namespace')
	DB = DAL('google:datastore')
    ## store sessions and tickets there
	session.connect(request, response, db=db)
    ## or store session in Memcache, Redis, etc.
    ## from gluon.contrib.memdb import MEMDB
    ## from google.appengine.api.memcache import Client
    ## session.connect(request, response, db = MEMDB(Client()))

## by default give a view/generic.extension to all actions from localhost
## none otherwise. a pattern can be 'controller/function.extension'
response.generic_patterns = ['*'] if request.is_local else []
## (optional) optimize handling of static files
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

#########################################################################
## Here is sample code if you need for
## - email capabilities
## - authentication (registration, login, logout, ... )
## - authorization (role based authorization)
## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
## - old style crud actions
## (more options discussed in gluon/tools.py)
#########################################################################
from gluon.tools import Auth, Crud, Service, PluginManager, prettydate
auth = Auth(db)
crud, service, plugins = Crud(db), Service(), PluginManager()


auth.settings.extra_fields['auth_user']= [
         Field('roll_no','integer',required=True),
	 Field('Gender','string',requires=IS_IN_SET(['Male','Female'])),
         Field('Hometown','string',required=True,),
    ]


## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)

## configure email
mail = auth.settings.mailer
mail.settings.server = 'smtp.gmail.com:587'
mail.settings.sender = 'mohit29091997@gmail.com'
mail.settings.login = 'mohit29091997:9463248218'

## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True

## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.
## register with janrain.com, write your domain:api_key in private/janrain.key
from gluon.contrib.login_methods.rpx_account import use_janrain
use_janrain(auth, filename='private/janrain.key')

#########################################################################
## Define your tables below (or better in another model file) for example
##
## >>> db.define_table('mytable',Field('myfield','string'))
##
## Fields can be 'string','text','password','integer','double','boolean'
##       'date','time','datetime','blob','upload', 'reference TABLENAME'
## There is an implicit 'id integer autoincrement' field
## Consult manual for more options, validators, etc.
##
## More API examples for controllers:
##
## >>> db.mytable.insert(myfield='value')
## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)
## >>> for row in rows: print row.id, row.myfield
#########################################################################

## after defining tables, uncomment below to enable auditing
# auth.enable_record_versioning(db)

#----------------------------------------------Posts-------------------------------------------#

db.define_table('books',
    	    Field('book_image','upload',uploadfield='picture_file',required=True,requires=IS_NOT_EMPTY()),
	        Field('picture_file','blob'),
            Field('title','string',required=True,requires=IS_NOT_EMPTY()),
            Field('Descrip','string',label='Description',required=True,requires=IS_NOT_EMPTY()),
            Field('ref_no','integer',label='Reference No.',required=True,requires=IS_NOT_EMPTY()),
            Field('price','integer',required=True),
            Field('classi','string',requires=IS_IN_SET(['Computer Architecture','Communications','Biology','Modern Physics','Graphics','Programming Languages''Game Theory','Networking','Artificial Intellignence','Database','Chemistry','Mathematics','Others']),label='Classification',required=True),
            auth.signature
            )
db.define_table('issue_books',
            Field('ref_no','integer',label='Reference No.', required=True,requires=IS_NOT_EMPTY()),
            Field('identity_number',label='Roll No.',required=True),
            Field('return_date','date', label='Return Date',writable=False,readable=False),
            auth.signature
            )
db.define_table('e_journals',
            Field('title','string',required=True),
            Field('link','string',required=True),
            Field('classi','text',label='Classification',required=True,requires=IS_NOT_EMPTY()),
            auth.signature
            )
db.define_table('thesis',
            Field('title','string',required=True),
            Field('depart','string',required=True),
            Field('cont','text',required=True),
            auth.signature
            )
db.define_table('journals',
            Field('title','string',required=True),
            Field('classi','text',label='Classification',required=True,requires=IS_NOT_EMPTY()),
            auth.signature
            )
db.define_table('ask',
            Field('subject','string'),
            Field('cont','text',required=True),
            auth.signature
            )
db.define_table('e_book',
            Field('Title','string'),
            Field('Descrip','text',label='Description'),
            Field('ebook','upload',uploadfield='pdf_file'),
            Field('pdf_file','blob'),
            auth.signature
            )
db.define_table('news',
            Field('news_image','upload',uploadfield='picture_file',required=True,requires=IS_NOT_EMPTY()),
            Field('picture_file','blob'),
            Field('Title','string',required=True),
            Field('cont','text',required=True),
            auth.signature
            )
db.define_table('lost_book',
            Field('person','integer'),
            Field('book_ref','string'),
            auth.signature
            )
db.define_table('recommend',
            Field('Title','string',label='Name Of the Book'),
            Field('Author','string',label='Author Of the Book'),
            Field('Publisher','string'),
            auth.signature
            )
db.define_table('answer_query',
            Field('body','text',label='Your comment'),
            Field('postid','reference ask',readable=False),
            auth.signature)
db.define_table('contacts',
            Field('nmes',required=True,label="Name"),
            Field('designation',required=True),
            Field('email',required=True),
            )
db.define_table('feedback',
            Field('Subject',required=True),
            Field('Description',required=True),
            auth.signature,
            )
