(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: 'home.html'"
p3
sS'layer'
p4
S'/home/mohit299/web/web2py/applications/Recepie/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hi, Have a Nice Day")\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n\n    \ndef redirect_after_login(form):\n\tredirect(URL(r=request,f=\'viewallposts\',args=[0]))\n\nauth.settings.login_onaccept.append(redirect_after_login)\nauth.settings.register_onaccept.append(redirect_after_login)\n#auth.settings.table_user.password.requires = IS_STRONG(min=8,special=1,upper=1,lower=1)\n@auth.requires_login()\ndef home():\n\n    a = db(db.auth_user.id ==  auth.user_id).select(db.auth_user.ALL)\n    return locals()\n\n@auth.requires_login()\ndef homepage():\n\n    id2 = request.args(0)\n    a = db(db.auth_user.id ==  id2).select(db.auth_user.ALL)\n    id1 = auth.user_id\n    return locals()\n\n@auth.requires_login()\ndef view_people():\n\n    id1 = auth.user_id\n    a = db(db.auth_user.id != auth.user_id).select(db.auth_user.ALL)\n    return locals()\n\n    \n#-----------------------------------------posts------------------------------------------------------#\nimport re\n@auth.requires_login()\ndef uploadimage():\n   arguments=request.args\n   return locals()\n@auth.requires_login()\ndef create_post():\n#\tform = SQLFORM(db.posts, deletable=True,upload=URL(\'download\'), fields=[\'post_text\', \'uploads\'])\n\tform = SQLFORM(db.recepie).process();            \n\tif form.process().accepted:\n\t   #\tdb.recepie.insert(post_text=form.vars.Post_Text)\n\t\tsession.flash=\'Post created\'\n\t\tredirect(URL(r=request,f=\'uploadimage.html\',args=form.id))\n\telif form.errors:\n\t\tresponse.flash=\'Errors in form\'\n\treturn locals()\n\n@auth.requires_login()\ndef viewmyposts():\n\tme = db(db.auth_user.id == auth.user_id).select(db.auth_user.first_name)[0][\'first_name\']\n\tp = db((db.recepie.id > 0) & (db.recepie.created_by == auth.user_id)).select(db.recepie.ALL ,orderby=~db.recepie.created_on)\n\tcomments=db(db.comment_post.id > 0).select(db.comment_post.ALL ,orderby=~db.comment_post.created_on)\n\treturn locals()\n@auth.requires_membership(\'Admins\')\ndef manage():\n   grid=SQLFORM.grid(db.recepie)\n   return locals()\n\n@auth.requires_login()\ndef viewallposts():\n        k=request.vars.pid\n\ts=db(db.like_counter).select()\n\tflag=0\n\tif k:\n\t   k=int(k)\n\t   for i in s:\n\t      if i.postid==k and i.parentid==auth.user_id :\n\t         db(db.like_counter.id==i.id).delete()\n\t\t flag=1\n\t   if flag==1:\n\t     if db(db.like_counter2.postid==k).select():\n\t       l=db(db.like_counter2.postid==k).select()\n\t       db(db.like_counter2.postid==k).update(number_of_likes=l[0].number_of_likes-1)\n           if flag == 0 :\n\t     l=db(db.recepie.id==k).select()\n\t     db.like_counter.insert(postid=k,parentid=l[0].created_by)\n\t     if db(db.like_counter2.postid==k).select():\n\t       l=db(db.like_counter2.postid==k).select()\n\t       db(db.like_counter2.postid==k).update(number_of_likes=l[0].number_of_likes+1)\n\t     else:\n\t       db.like_counter2.insert(postid=k,number_of_likes=1)\n\t \n\ts=db(db.like_counter2).select(orderby=~db.like_counter2.postid)\n        user = auth.user_id\n\tp = db(db.recepie.id > 0).select(db.recepie.ALL ,orderby=~db.recepie.created_on)\n\tcomments=db(db.comment_post.id > 0).select(db.comment_post.ALL) \n\treturn locals()\n\n@auth.requires_login()\ndef viewpost():\n   pid=request.vars.pid\n   r=db(db.recepie.id==pid).select()\n\n   return locals()\n\n@auth.requires_login()\ndef post1():\n#add comments in viewallposts\n\tcid=request.vars.cid\n\tif cid!=None:\n\t\tprev=request.vars.prev+\'?cid=\'+cid\n\telse:\n\t\tprev = request.vars.prev\n\tcomment=request.vars.comment\n\tpid=request.vars.pid\n\tif type(comment) == list:\n\t\tcomment =  comment[0]\n\tdb.comment_post.insert(body=str(comment),postid=pid)\n\tredirect(URL(r=request,f=prev))\n\treturn locals()\n@auth.requires_login()\ndef post2():\n#add comments in viewmyposts\n\tcomment=request.vars.comment\n\tpid=request.vars.pid\n\tif type(comment) == list:\n\t\tcomment =  comment[0]\n\tdb.comment_post.insert(body=str(comment),postid=pid)\n\tredirect(URL(r=request,f=\'viewmyposts\'))\n\treturn locals()\n#\treturn dict(form=SQLFORM(db.comment_post).process(),comments=db(db.comment_post).select())\n\n\n@auth.requires_login()\ndef delpost():\n\tpid=request.vars.pid\n\tif request.vars.grp_id!=None:\n\t\tprev = request.vars.prev+\'/\'+request.vars.grp_id\n\telse : \n\t\tprev = request.vars.prev\n\tdb(db.recepie.id == pid).delete()\n\tsession.flash=\'Deleted !\'\n\tredirect(URL(r=request,f=prev))\n\treturn locals()\n\n@auth.requires_login()\ndef editpost():\n\tpid = request.vars.pid\n\tif request.vars.grp_id!=None:\n\t\tprev = request.vars.prev+\'/\'+request.vars.grp_id\n\telse:\n\t\tprev = request.vars.prev\n\tpst = db(db.recepie.id == pid).select(db.recepie.ALL)[0]\n\tform = SQLFORM(db.recepie,pid,deletable=True, fields=[\'post_text\'])\n#\tform = SQLFORM.factory(\n#\t\tField(\'Post_Text\', \'text\',default = pst[\'post_text\']),            \n#\t\tField(\'Attachment\', \'upload\')\n#\t\t)            \n\tif form.process().accepted:\n\t\tp = db(db.recepie.id == pid).select(db.recepie.ALL)[0]\n                p.post_text = form.vars.post_text\n\t\tp.update_record()\n\t\tsession.flash=\'Successfully Updated\'\n\t\tredirect(URL(r=request,f=prev))\n\telif form.errors:\n\t\tresponse.flash=\'Errors in form\'\n\treturn locals()\n\n#----------------------- Update My Information --------------------------\n@auth.requires_login()\ndef update_my_info():\n\t form = SQLFORM(db.auth_user, auth.user_id)\n\t if form.process().accepted:\n\t\t response.flash = \'form accepted\'\t\n       \t elif form.errors:\n\t\tresponse.flash=\'Errors in form\'    \n\t return dict(form=form)\n\t redirect(URL(r=request,f = \'home\'))\n\nresponse._vars=response._caller(homepage)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mohit299/web/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/mohit299/web/web2py/applications/Recepie/controllers/default.py", line 247, in <module>\n  File "/home/mohit299/web/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mohit299/web/web2py/gluon/tools.py", line 2942, in f\n    return action(*a, **b)\n  File "/home/mohit299/web/web2py/applications/Recepie/controllers/default.py", line 95, in homepage\n    a = db(db.auth_user.id ==  id2).select(db.auth_user.ALL)\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 9769, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 2222, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1667, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1577, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1356, in expand\n    return op(first, second, **optional_args)\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1281, in EQ\n    self.expand(second, first.type))\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1366, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/mohit299/web/web2py/gluon/dal.py", line 1796, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'home.html\'\n'
p11
s.